from aiogram.types import InputFile

from bot.dispatcher import bot, dp
from aiogram.dispatcher.filters import Text
from aiogram import types
from bot.keyboard import *


@dp.message_handler(Text(equals='Random photo'))
async def open_kb_photo(message: types.Message):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    await message.answer('–ù–∞–∂–º–∏—Ç–µ –†–∞–Ω–¥–æ–º —Ñ–æ—Ç–æ',
                         reply_markup=kb_photo)
    await message.delete()


@dp.message_handler(Text(equals='–†–∞–Ω–¥–æ–º —Ñ–æ—Ç–æ'))
async def send_random_photo(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
    await send_random(message)


@dp.message_handler(Text(equals='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
async def open_main_menu(message: types.Message):
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                         reply_markup=kb)
    await message.delete()


@dp.message_handler(commands=['sleep'])
async def sleep_command(message: types.Message):
    photo = InputFile('sleep.jpeg')
    photo1 = InputFile('ozornica.png')
    await message.answer('—Ö–≤–∞—Ç–∏—Ç –±–∞–ª–æ–≤–∞—Ç—å—Å—è')
    await bot.send_photo(chat_id=message.chat.id,
                         photo=photo1)
    await message.delete()


@dp.message_handler(commands=['morning'])
async def sleep_command(message: types.Message):
    photo = InputFile('morningcat.jpeg')
    photo1 = InputFile('morning.jpeg')
    await message.answer('—è —É—Å—Ç–∞–ª—å')
    await bot.send_photo(chat_id=message.chat.id,
                         photo=photo)
    await message.delete()


@dp.message_handler(commands=['count'])
async def count_command(message: types.Message):
    await message.answer(f'–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {_count_calls}')
    await message.delete()


@dp.message_handler(commands=['description'])
async def description_command(message: types.Message):
    await message.answer(text=BOT_DESCRIPTION)
    await message.delete()


@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text=HELP_COMMAND,
                           parse_mode='HTML')


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await bot.send_message(text='<em><b>–î–æ–±—Ä–æ</b> –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</em>',
                           parse_mode='HTML',
                           reply_markup=kb,
                           chat_id=message.chat.id)
    await message.delete()


@dp.message_handler(commands=['‚ù§Ô∏è'])
async def heart_command(message: types.Message):
    """–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∏–∫–µ—Ä."""
    await message.answer('—Å–º–æ—Ç—Ä–∏ –∫–∞–∫–æ–π —Å–º–µ—à–Ω–æ–π –∫–æ—Ç–∏–∫\n—à—É—Ç–∫–∞')
    await bot.send_sticker(message.chat.id,
                           sticker="CAACAgIAAxkBAAEH0p9j8z9SA9n8DxwWkHiDxCZcn87M4QACZwEAApafjA6u9uvd6FBSAS4E")
    await message.delete()


@dp.message_handler(commands=['give'])
async def give_command(message: types.Message):
    """–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∏–∫–µ—Ä."""
    await message.answer('—Å–º–æ—Ç—Ä–∏ –∫–∞–∫–æ–π —Å–º–µ—à–Ω–æ–π –∫–æ—Ç–∏–∫\n—à—É—Ç–∫–∞')
    await bot.send_sticker(message.chat.id,
                           sticker="CAACAgIAAxkBAAEH0p9j8z9SA9n8DxwWkHiDxCZcn87M4QACZwEAApafjA6u9uvd6FBSAS4E")
    await message.delete()


@dp.message_handler(commands=['–∫–∞–π—Ñ'])
async def kayf_command(message: types.Message):
    messages = ('–∫–∞–π—Ñ', '–∫–∞–π—Ñ –∫–∞–π—Ñ', '–∫–∞–π—Ñ?', '–ö–ê–ê–ê–ô–ô–ô–§–§–§')
    picture = random.choice(tup_of_kayf)
    photo = InputFile(picture)
    indx = [char for char in picture if char.isdigit()]
    await message.reply(text=messages[int(indx[0]) - 1])
    await bot.send_photo(chat_id=message.chat.id,
                         photo=photo,
                         reply_markup=ikb)
    await message.delete()


@dp.message_handler(commands=['picture'])
async def picture_command(message: types.Message):
    photo = InputFile('dog.jpeg')
    await bot.send_photo(chat_id=message.chat.id,
                         photo=photo)
    await message.delete()


@dp.message_handler(commands=['botfather'])
async def botfather_command(message: types.Message):
    photo = InputFile('botfather.png')
    await message.answer('–ö—Ç–æ —Ç—É—Ç –ø–∞–ø–æ—á–∫–∞')
    await bot.send_photo(chat_id=message.chat.id,
                         photo=photo)
    await message.delete()


@dp.message_handler(commands=['location'])
async def location_command(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ."""
    await bot.send_location(chat_id=message.chat.id,
                            latitude=random.random() * 100,
                            longitude=random.random() * 100)
    await message.delete()


@dp.message_handler(content_types=['sticker'])
async def get_sticker_id(message: types.Message):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–π–¥–∏ —Å—Ç–∏–∫–µ—Ä–∞."""
    await bot.send_message(chat_id=message.from_user.id,
                           text=message.sticker.file_id)


@dp.message_handler(commands=['phrase'])
async def random_phrases_commands(message: types.Message):
    result = f'{random.choice(PHRASE1)} {random.choice(PHRASE2)}'
    await message.answer(text=result)
    await message.delete()


@dp.message_handler(content_types=types.ContentTypes.PHOTO)
async def photo_reply(message: types.Message):
    await message.reply('–ö—Ä–∞—Å–∏–≤–µ–Ω—å–∫–æ üòç')


@dp.message_handler()
async def echo(message: types.Message):
    bot_message = message.text
    if '‚ù§Ô∏è' in message.text:
        bot_message = message.text.replace('‚ù§Ô∏è', 'üñ§')
    if 'location' in message.text:
        res_coord = [float(coord) for coord in message.text.split() if coord.isdigit()]
        return await bot.send_location(chat_id=message.chat.id,
                                       latitude=res_coord[0],
                                       longitude=res_coord[1])
    global _count_calls
    _count_calls += 1
    await message.answer(text=bot_message)


@dp.message_handler()
async def echo(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ chat_id"""
    global _count_calls
    _count_calls += 1
    # chat_id=message.from_user.id –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_message(chat_id=message.chat.id, text=message.text)
