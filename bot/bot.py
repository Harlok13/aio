import logging
from aiogram import types, executor
from aiogram.dispatcher.filters import Text
from aiogram.types import InputFile

from contextlib import contextmanager
import random
from keyboard import *

HELP_COMMAND = """
–í—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –æ–ø–∏—Å–∞–Ω—ã –≤ decription
<b>/start</b> - <em>–Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º/–æ–∫—Ç—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É</em>
<b>/help</b> - <em>—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥</em>
<b>/description</b> - <em>–æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞</em>
<b>/count</b> - <em>–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π</em>
<b>/give</b> - <em>–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä</em>
<b>/picture</b> - <em>–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É</em>
<b>/location</b> - <em>–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</em>
<b>/–∫–∞–π—Ñ</b> - <em>—Ç—É–ø–æ –∫–∞–π—Ñ</em>
<b>/botfather</b> - <em>–∫—Ç–æ —Ç—É—Ç –ø–∞–ø–æ—á–∫–∞</em>
<b>/phrase</b> - <em>–∞ —Ç—ã –ø–æ–ø—Ä–æ–±—É–π</em>
"""

BOT_DESCRIPTION = """
–≠—Ç–æ—Ç –º–∏–ª—ã–π –±–æ—Ç –ø–ª–æ–¥ –º–æ–µ–≥–æ —Ç–≤–æ—Ä–µ–Ω–∏—è,
–Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –µ–≥–æ —Ä–∞–±–æ—Ç–æ–π:)

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∏–∫–µ—Ä–∞ –≤–µ—Ä–Ω–µ—Ç –µ–≥–æ –∞–π–¥–∏
- –¥—É–±–ª–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ. –µ—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∫—Ä–∞—Å–Ω–æ–µ —Å–µ—Ä–¥–µ—á–∫–æ, —Ç–æ –º–µ–Ω—è–µ—Ç –µ–≥–æ –Ω–∞ —á–µ—Ä–Ω–æ–µ
- –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç–∫—Ä–æ–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
p.s.
–ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –≤ –¥–æ—Ä–∞–±–æ—Ç–∫–µ
"""

# —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–∞–π–ª, –∑–∞–ø–∏—Å—ã–≤–∞—é—â–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
_count_calls = 0
_COUNTER_FILE = 'counter'

tup_of_kayf = ['kayf1.jpeg', 'kayf2.jpeg', 'kayf3.jpeg', 'kayf4.jpeg']

PHRASE1 = ('–∫–æ—Ä–æ–ª–µ–≤–∞', '—Å—Ç–µ—Ä–≤–∞', '—Ñ—É—Ñ—ã—Ä—è', '–º–∞–ª—é—Å—è', '–Ω–∞–∫—Ä–∞—Å—é—Å—è', '–º–∏–∫—Ä–æ—Å—é—Å—è',
           '–º–∏–ª–∞—Ñ–∫–∞', '–∏–Ω—Ñ—É–∑–æ—Ä–∏—è', '–∫—Ä–æ–≤–æ—Å–∏—Å—è', '–º–∏–∫—Ä–æ–¥—ã—Ä–æ—á–∫–∞', '—Å—é—Å–∏–ø—É—Å–∏', '–æ–±–∂–æ—Ä–∞', '–≤—ã–¥—Ä–∞')
PHRASE2 = ('–∑–∞–º–æ—Ä—Å–∫–∞—è', '–ø—Ä–∏–ø–ª—é—Å–Ω—É—Ç–∞—è', '–æ–±—ã—á–Ω–∞—è', '–æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–∞—è', '—á—É–¥–æ–∫–æ–≤–∞—Ç–∞—è',
           '–Ω–∞—Ñ—É—Ñ—ã—Ä–µ–Ω–Ω–∞—è', '—É–Ω–∏—Ç–∞–∑–æ–ª—é–±–∏–≤–∞—è', '—Ä–∞–∑–¥—É–ø–ª–µ–Ω–Ω–∞—è', '–Ω–µ–¥–æ–¥–µ–ª–∞–Ω–Ω–∞—è', '–Ω–µ–¥–æ–¥–µ–ª–∞–Ω–Ω–∞—è',
           '—Ä–∞—Å–∫–æ–ª–±–∞—Å—Å–Ω–∞—è', '–ø—Ä–∏–¥—É—Ä–∫–æ–≤–∞—Ç–∞—è', '–º–∏–ª–µ–Ω—å–∫–∞—è', '–±–µ–Ω–∑–æ–∫–æ–ª–æ–Ω–æ—á–Ω–∞—è')

PHOTO = ('kayf1.jpeg', 'kayf2.jpeg',
         'kayf3.jpeg', 'kayf4.jpeg',
         'morning.jpeg', 'morningcat.jpeg',
         'ozornica.png', 'botfather.png')

DESCRIPTION_PHOTO = ('about kayf1', 'about kayf2',
                     'about kayf3', 'about kayf4',
                     'about morning', 'about morningcat',
                     'about ozornica', 'about botfather')

PHOTO_DATA = dict(zip(PHOTO, DESCRIPTION_PHOTO))

# –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)



class FileCounter:
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞,
    —Å–æ—Ö—Ä–∞–Ω—è—è –µ–≥–æ –¥–∞–∂–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã.
    """

    def __init__(self, file_name, method='wr'):
        self.opened_obj = open(file_name, method)

    def __enter__(self):
        return self.opened_obj

    def __exit__(self, type, value, traceback):
        # self.opened_obj.write()
        self.opened_obj.close()


async def send_random(message: types.Message):
    flag = random.choice(tuple(PHOTO_DATA.keys()))
    photo = InputFile(flag)
    await bot.send_photo(chat_id=message.chat.id,
                         photo=photo,
                         caption=PHOTO_DATA.get(flag, False),
                         reply_markup=ikb_photo)
    # await message.delete()


@contextmanager
def open_counter_file(file_name, method='r+'):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞,
    —Å–æ—Ö—Ä–∞–Ω—è—è –µ–≥–æ –¥–∞–∂–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã."""
    opened_file = open(file_name, method)
    try:
        yield opened_file
    finally:
        opened_file.write(f'\n{_count_calls}')
        opened_file.close()


async def on_startup(_):
    with open_counter_file(_COUNTER_FILE) as file:
        res = file.readlines()
        print(res)
        global _count_calls
        _count_calls = int(res[-1])

    print(f'–ê –≤–æ—Ç –∏ —Å—á–µ—Ç—á–∏–∫: {_count_calls}')


@dp.message_handler(Text(equals='Random photo'))
async def open_kb_photo(message: types.Message):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    await message.answer('–ù–∞–∂–º–∏—Ç–µ –†–∞–Ω–¥–æ–º —Ñ–æ—Ç–æ',
                         reply_markup=kb_photo)
    await message.delete()


@dp.message_handler(Text(equals='–†–∞–Ω–¥–æ–º —Ñ–æ—Ç–æ'))
async def send_random_photo(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
    await send_random(message)


@dp.message_handler(Text(equals='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
async def open_main_menu(message: types.Message):
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                         reply_markup=kb)
    await message.delete()


@dp.message_handler(commands=['sleep'])
async def sleep_command(message: types.Message):
    photo = InputFile('sleep.jpeg')
    photo1 = InputFile('ozornica.png')
    await message.answer('—Ö–≤–∞—Ç–∏—Ç –±–∞–ª–æ–≤–∞—Ç—å—Å—è')
    await bot.send_photo(chat_id=message.chat.id,
                         photo=photo1)
    await message.delete()


@dp.message_handler(commands=['morning'])
async def sleep_command(message: types.Message):
    photo = InputFile('morningcat.jpeg')
    photo1 = InputFile('morning.jpeg')
    await message.answer('—è —É—Å—Ç–∞–ª—å')
    await bot.send_photo(chat_id=message.chat.id,
                         photo=photo)
    await message.delete()


@dp.message_handler(commands=['count'])
async def count_command(message: types.Message):
    await message.answer(f'–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {_count_calls}')
    await message.delete()


@dp.message_handler(commands=['description'])
async def description_command(message: types.Message):
    await message.answer(text=BOT_DESCRIPTION)
    await message.delete()


@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text=HELP_COMMAND,
                           parse_mode='HTML')


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await bot.send_message(text='<em><b>–î–æ–±—Ä–æ</b> –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</em>',
                           parse_mode='HTML',
                           reply_markup=kb,
                           chat_id=message.chat.id)
    await message.delete()


@dp.message_handler(commands=['‚ù§Ô∏è'])
async def heart_command(message: types.Message):
    """–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∏–∫–µ—Ä."""
    await message.answer('—Å–º–æ—Ç—Ä–∏ –∫–∞–∫–æ–π —Å–º–µ—à–Ω–æ–π –∫–æ—Ç–∏–∫\n—à—É—Ç–∫–∞')
    await bot.send_sticker(message.chat.id,
                           sticker="CAACAgIAAxkBAAEH0p9j8z9SA9n8DxwWkHiDxCZcn87M4QACZwEAApafjA6u9uvd6FBSAS4E")
    await message.delete()


@dp.message_handler(commands=['give'])
async def give_command(message: types.Message):
    """–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∏–∫–µ—Ä."""
    await message.answer('—Å–º–æ—Ç—Ä–∏ –∫–∞–∫–æ–π —Å–º–µ—à–Ω–æ–π –∫–æ—Ç–∏–∫\n—à—É—Ç–∫–∞')
    await bot.send_sticker(message.chat.id,
                           sticker="CAACAgIAAxkBAAEH0p9j8z9SA9n8DxwWkHiDxCZcn87M4QACZwEAApafjA6u9uvd6FBSAS4E")
    await message.delete()


@dp.message_handler(commands=['–∫–∞–π—Ñ'])
async def kayf_command(message: types.Message):
    messages = ('–∫–∞–π—Ñ', '–∫–∞–π—Ñ –∫–∞–π—Ñ', '–∫–∞–π—Ñ?', '–ö–ê–ê–ê–ô–ô–ô–§–§–§')
    picture = random.choice(tup_of_kayf)
    photo = InputFile(picture)
    indx = [char for char in picture if char.isdigit()]
    await message.reply(text=messages[int(indx[0]) - 1])
    await bot.send_photo(chat_id=message.chat.id,
                         photo=photo,
                         reply_markup=ikb)
    await message.delete()


@dp.message_handler(commands=['picture'])
async def picture_command(message: types.Message):
    photo = InputFile('dog.jpeg')
    await bot.send_photo(chat_id=message.chat.id,
                         photo=photo)
    await message.delete()


@dp.message_handler(commands=['botfather'])
async def botfather_command(message: types.Message):
    photo = InputFile('botfather.png')
    await message.answer('–ö—Ç–æ —Ç—É—Ç –ø–∞–ø–æ—á–∫–∞')
    await bot.send_photo(chat_id=message.chat.id,
                         photo=photo)
    await message.delete()


@dp.message_handler(commands=['location'])
async def location_command(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ."""
    await bot.send_location(chat_id=message.chat.id,
                            latitude=random.random() * 100,
                            longitude=random.random() * 100)
    await message.delete()


@dp.message_handler(content_types=['sticker'])
async def get_sticker_id(message: types.Message):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–π–¥–∏ —Å—Ç–∏–∫–µ—Ä–∞."""
    await bot.send_message(chat_id=message.from_user.id,
                           text=message.sticker.file_id)


@dp.message_handler(commands=['phrase'])
async def random_phrases_commands(message: types.Message):
    result = f'{random.choice(PHRASE1)} {random.choice(PHRASE2)}'
    await message.answer(text=result)
    await message.delete()


@dp.message_handler(content_types=types.ContentTypes.PHOTO)
async def photo_reply(message: types.Message):
    await message.reply('–ö—Ä–∞—Å–∏–≤–µ–Ω—å–∫–æ üòç')


@dp.callback_query_handler()
async def callback_random_photo(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±–µ–∫–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ send_random_photo"""
    if callback.data == 'like':
        await callback.answer('–í–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!')
    elif callback.data == 'dislike':
        await callback.answer('–í–∞–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!')
    else:
        await send_random(message=callback.message)
        await callback.answer()


@dp.message_handler()
async def echo(message: types.Message):
    bot_message = message.text
    if '‚ù§Ô∏è' in message.text:
        bot_message = message.text.replace('‚ù§Ô∏è', 'üñ§')
    if 'location' in message.text:
        res_coord = [float(coord) for coord in message.text.split() if coord.isdigit()]
        return await bot.send_location(chat_id=message.chat.id,
                                       latitude=res_coord[0],
                                       longitude=res_coord[1])
    global _count_calls
    _count_calls += 1
    await message.answer(text=bot_message)


@dp.message_handler()
async def echo(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ chat_id"""
    global _count_calls
    _count_calls += 1
    # chat_id=message.from_user.id –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_message(chat_id=message.chat.id, text=message.text)


if __name__ == '__main__':
    # asyncio.run(main())
    # skip_updates –±—É–¥–µ—Ç —Å–∫–∏–ø–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –≤ —Å–µ—Ç–∏
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
